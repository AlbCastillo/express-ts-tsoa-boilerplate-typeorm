import { singleton } from 'tsyringe';

import { Create{{pascalCase name}}Dto } from './dto/create-{{name}}.dto';
import {{camelCase name}}Model from './models/{{name}}.model';
import { {{pascalCase name}}I } from './models/{{name}}.schema';
import { ApiError } from '../../../middlewares/apiErrors';
import { HTTP_ERRORS } from '../../../utils/httpErrors';

@singleton()
export class {{pascalCase name}}Service {
  async create({{camelCase name}}: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}I> {
    try {
      return await {{camelCase name}}Model.create({{camelCase name}});
    } catch (error) {
      throw new ApiError(HTTP_ERRORS.INTERNAL_SERVER_ERROR, 'Error creating {{name}}!');
    }
  }

  async remove(id: string): Promise<{{pascalCase name}}I> {
    try {
      const {{camelCase name}} = await {{camelCase name}}Model.findOneAndDelete({ _id: id });
      if ({{camelCase name}}) return {{camelCase name}};
      throw new ApiError(HTTP_ERRORS.NOT_FOUND, '{{pascalCase name}} not found!');
    } catch (error) {
      throw new ApiError(HTTP_ERRORS.INTERNAL_SERVER_ERROR, 'Error deleting {{name}}!');
    }
  }

  async findOne(id: string): Promise<{{pascalCase name}}I> {
    try {
      const {{camelCase name}} = await {{camelCase name}}Model.findById(id);
      if ({{camelCase name}}) return {{camelCase name}};
      throw new ApiError(HTTP_ERRORS.NOT_FOUND, '{{pascalCase name}} not found!');
    } catch (error) {
      throw new ApiError(HTTP_ERRORS.INTERNAL_SERVER_ERROR, 'Error finding {{name}}!');
    }
  }

  async findAll(): Promise<{{pascalCase name}}I[]> {
    try {
      return {{camelCase name}}Model.find();
    } catch (error) {
      throw new ApiError(HTTP_ERRORS.INTERNAL_SERVER_ERROR, 'Error finding {{name}}s!');
    }
  }
}
